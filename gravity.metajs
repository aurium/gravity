"use strict";

try {

var log = function() { // debug
  var args = []; // debug
  for (var i=0; i<arguments.length; i++) args.push(arguments[i]); // debug
  /Android/.test(navigator.userAgent) ? // debug
    0: //alert(args.join(' - ')) : // debug
    console.log.apply(console,args); // debug
}; // debug

var abs = Math.abs,
    sin = Math.sin,
    cos = Math.cos,
    pi = Math.PI,
    completeRad = 2 * pi, // complete revolution
    deg90 = pi/2,
    turn3 = completeRad/3;

var biteLimit = function(val) {
  return val>255 ? 255 : ( val<0 ? 0 : val );
}

var rand = function(num) { return (Math.random()-0.5) * (num||1) };

var makeAudio = function(length, toneIni, toneEnd, noise, gainFn) {
  gainFn = {
    line: function(i,length){ return 1-i/length },
    triangle: function(i,length){
      return (i<length/3) ? i/(length/3) : 1-(i-(length/3))/(length*2/3)
    }
  }[gainFn||'line'];
  var toneDelta = toneEnd - toneIni;
  var data = [];
  for ( var i=0; i<length; i++ )
    data.push(biteLimit(
      sin( i*(toneIni+toneDelta*(i/length))/800 + noise*rand(pi) )
      * 127 // half value
      * gainFn(i,length) // increase/decrease amplitude
      + 127 // move to medium line
    ));
  var wav = new RIFFWAVE(data);
  var player = document.createElement('audio');
  player.src = wav.dataURI;
  return player;
}

var play = function(soundName) {
  if (allowSound) play[soundName].play();
};
play.explosion = makeAudio(10000, 150, 50, 1);
play.gun = makeAudio(4000, 1500, 600, 0.2, 'triangle');

// makeMusic -- build a RIFFWAVE music based on a score simplifyed notation
// param music is a string each 3 char means:
// * length: 2^value * 1000
//   * 7 semibreve    = 4 secs
//   * 6 mínima       = 2 secs
//   * 5 semínima     = 1 sec at sample rate 8000
//   * 4 colcheia     = 1/2 sec
//   * 3 semicolcheia = 1/4 sec
//   * 2 fusa         = 1/8 sec
//   * 1 semifusa     = 1/16 sec
// * note: a sequential upper letter to represent a frequency, where N is A4 (440Hz)
//   * G3# = A 
//   * A3  = B lá
//   * A3# = C 
//   * B3  = D sí
//   * C4  = E dó
//   * C4# = F 
//   * D4  = G ré
//   * D4# = H 
//   * E4  = I mí
//   * F4  = J fá
//   * F4# = K 
//   * G4  = L sol
//   * G4# = M 
//   * A4  = N lá
//   * A4# = O
//   * B4  = P sí
//   * C5  = Q dó
//   * C5# = R
//   * D5  = S ré
//   * D5# = T
//   * E5  = U mí
//   * F5  = V fá
//   * F5# = W
//   * G5  = X sol
//   * G5# = Y
//   * A5  = Z lá
// * separator: an ignored char
var makeMusic = function(sampleRate, bpm, pitch, music) {
  var pitchFn = function(i,length){
    return ( (i<length/4) ? i/(length/4) : 1-(i-(length/4))/(length*3/4) ) * pitch;
  }
  var data = [];
  for ( var n=0; n<music.length; n+=3 ) {
    var length = Math.pow(2, parseInt(music.charAt(n))) * (sampleRate/32) * 120/bpm;
    if ( music.charAt(n+1) == '-' ) {
      var freq = 0 // pause
    } else {
      var note = music.charCodeAt(n+1)-78; // the "N" value, so N is A4 (440Hz)
      var freq = Math.pow(2, note/12 ) * 440 // Hz
    }
    for ( var i=0; i<length; i++ ) {
      data.push(biteLimit(
        sin( i*pi*freq/sampleRate )
        * 127 // half value
        * pitchFn(i,length) // increase/decrease amplitude
        + 127 // move to medium line
      ));
    }
  }
  var wav = new RIFFWAVE(data,{sampleRate:sampleRate});
  var player = document.createElement('audio');
  player.src = wav.dataURI;
  return player;
}
var music;
setTimeout(function(){
  var superman = '4L 3L 3E 3L 5L 1- 4Q 4L 5E 1- 4L 3L 3E 3L 5L 1- 4Q 3P 5P ';
                 //'4L 3L 3E 3L 5L 1- 4Q 4L 5E 1- 3Q 3Q 3Q 3Q 3S 3S 4S 3Z 3X ';
  var heart;
  for (var t=6; t>3 ;t--) for (var i=0; i<3*t ;i++) heart += '3G 2D '+t+'- ';
  var intro   = '4D 4D 3G 3G 3- 4I 4J 3K 3L 3- 4D 4D 3G 3G 3- 4N 4M 3K 3J 3- ';
  var phrase1 = '4E 4F 4G 3E 3F 3G 2E 2F 2G 1- 2H 2I 2J 1- 2K 2L 2M 1- ';
  var phrase2 = '3W 3Z 3Y 3X 3W 2- 2N 2N 2N 2- 2M 2M 2M 2- 2L 2L 2L 2- 3P 3O ';
  var phrase3 = '2- ';
  for (var i='O'.charCodeAt(0); i>'B'.charCodeAt(0) ;i-=4)
    phrase3 += '4' + String.fromCharCode(i+1) +' '+
               '4' + String.fromCharCode(i+1) +' '+
               '3' + String.fromCharCode(i) +' '+
               '3' + String.fromCharCode(i) +' '+
               '3' + String.fromCharCode(i) +' '+
               '3' + String.fromCharCode(i) +' 3- ';
  music = makeMusic(2000, 180, .7,
    heart + intro + phrase1 + phrase2 + phrase3 + heart + superman
  );
  music.loop = true;
  music.play();
}, 100);

var randColor = function(mr,vr,mg,vg,mb,vb) {
  var r1 = Math.round( mr + rand(vr) ),
      g1 = Math.round( mg + rand(vg) ),
      b1 = Math.round( mb + rand(vb) ),
      r2 = Math.round( r1*2.8 ),
      g2 = Math.round( g1*2.8 ),
      b2 = Math.round( b1*2.8 ),
      r3 = Math.round( r1*3.6 ),
      g3 = Math.round( g1*3.6 ),
      b3 = Math.round( b1*3.6 );
      biteLimit(r2);
      biteLimit(g2);
      biteLimit(b2);
      biteLimit(r3);
      biteLimit(g3);
      biteLimit(b3);
  return [ [r1,g1,b1].join(','), [r2,g2,b2].join(','), [r3,g3,b3].join(',') ];
};

var distP2P = function(p1, p2) {
  var dx = p1.x - p2.x,
      dy = p1.y - p2.y,
      d = Math.sqrt( dx*dx + dy*dy ),
      x = dx / d,
      y = dy / d;
  return { x:x, y:y, d:d }
};

var ctx = c.getContext('2d'),
    ctxMap = map.getContext('2d'),
    d = document,
    b = d.body,
    touchable = false,
    qualityLevel = 1,
    allowSound = true,
    pause = false,
    secs = function(num) { return num*1000 },
    //macro orbDist1: 500
    //macro orbDist2: 900
    //macro orbDist3: 1400
    //macro orbDist4: 1900
    //macro orbVel1: .0020
    //macro orbVel2: .0010
    //macro orbVel3: .0005
    //macro orbVel4: .0002
    planets = {
      sun:{ m:200, c:['255,180,0','255,255,10','255,255,80'], r:150+rand(10) },

      // Orbit 1
      p1a:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:rand() },

      p1b:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:2+rand() },

      p1c:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:4+rand() },

      // Orbit 2
      p2a:  { m:30, c:['0,100,180','0,180,220','50,220,255'],
              r:40, d:orbDist2+rand(50), v:orbVel2, a:0.0+rand()*.8 },
      m2a1: { m:20, c:['100,100,100','200,200,200','250,250,250'],
              r:25,  d:130+rand(10),  v:orbVel1*4,  a:rand(7), p:'p2a' },

      p2b:  { m:30, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist2+rand(50), v:orbVel2, a:1.5+rand()*.8 },

      p2c:  { m:30, c:randColor(100,60,80,80,0,120),
              r:45+rand(10), d:orbDist2+rand(50), v:orbVel2, a:3.0+rand()*.8 },

      p2d:  { m:30, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist2+rand(50), v:orbVel2, a:4.5+rand()*.8 },

      // Orbit 3
      p3a:  { m:50, c:randColor(100,60,80,80,0,120),
              r:70+rand(15), d:orbDist3+rand(20), v:orbVel3, a:2+rand() },

      p3b:  { m:50, c:randColor(100,60,80,80,0,120),
              r:80+rand(15), d:orbDist3+rand(20), v:orbVel3, a:4+rand() },
      m3b1: { m:20, c:randColor(100,60,80,80,0,120),
              r:20+rand(2),  d:160+rand(10),   v:orbVel3*6,  a:rand(7), p:'p3b' },
      m3b2: { m:20, c:randColor(100,60,80,80,0,120),
              r:18+rand(3),  d:230+rand(10),  v:orbVel3*3,  a:rand(), p:'p3b' },
      m3b3: { m:20, c:randColor(100,60,80,80,0,120),
              r:18+rand(3),  d:230+rand(10),  v:orbVel3*3,  a:3+rand(), p:'p3b' },

      p3c:  { m:50, c:randColor(100,60,80,80,0,120),
              r:70+rand(15), d:orbDist3+rand(20), v:orbVel3, a:0+rand() },

      // Orbit 4
      p4a:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:0.0+rand()*.8 },

      p4b:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:1.5+rand()*.8 },

      p4c:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:3.0+rand()*.8 },

      p4d:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:4.5+rand()*.8 }
    },
    biggerPlanetD = orbDist4,
    boids = [], // see "Initialize Boids"
    missiles = [],
    sun = planets.sun,
    // zoom: the wanted zoom.
    // z: the current zoom.
    // scrC*: the center of the screen, calculated on start and each resize.
    // viewC*: the related wanted position to put on the center of the screen.
    // vC*: the current related position to put on the center of the screen.
    vCX = null,
    vCY = null,
    viewCX = 0,
    viewCY = 0,
    scrCX = 0,
    scrCY = 0,
    w = 0,
    h = 0,
    z = 0.1,
    zoom = 1,
    ship = null, // see "Initialize Ship"
    shipAlive = false,
    usrInput = {},
    explosions = [],
    focus = ship,
    imgDataObj, imgData, imgDataLength,
    gConst = 0.01, //6.674e-11
    pixelRatio = window.devicePixelRatio,
    now = Date.now,
    start = now();

viewport.setAttribute('content',
  'width=device-width, user-scalable=no, initial-scale=' + (1/pixelRatio)
);
if ( pixelRatio >= 2 ) b.className += ' pix20';
else if ( pixelRatio > 1 ) b.className += ' pix15';

try {
  if (document.createEvent("TouchEvent")) {
    b.className += ' touchable';
    touchable = true;
  }
} catch(e) { }

var shipDie = function(txt, showNow) {
  play('explosion');
  shipAlive = false;
  if (!showNow) return setTimeout( function(){ shipDie(txt,true) }, 500 );
  focus = sun;
  zoom = (h/biggerPlanetD)/2;
  if (!txt) txt = 'You die.'
  deadMsg.innerHTML += txt +
    '<a class="bt" onclick="pressDialogBt()">Restart</a>';
  pressDialogBt = function(){ document.location.reload() };
  deadMsg.style.display = 'block';
};

var showConfig = function() {
  pause = true;
  pressDialogBt = function(){
    pause = false;
    configBox.style.display = 'none';
  };
  configBox.style.display = 'block';
};

(window.onresize = function(e) {
  if (vCX==null) {
    vCX = planets.p2a.d/2;
    vCY = planets.p2a.d/2;
  }
  scrCX = (c.width = w = d.documentElement.clientWidth) / 2;
  scrCY = (c.height = h = d.documentElement.clientHeight) / 2;
  map.cx = (map.width = mapBox.clientWidth - 10) / 2;
  map.cy = (map.height = mapBox.clientHeight - 10) / 2;
  ctxMap.fillStyle = '#333';
  ctxMap.fillRect (0,0,map.width,map.height);
  log(w,h, map.width,map.height);
  /*
  log( 'resize', scrCX,w, scrCY,h ); // debug
  imgDataObj = ctx.getImageData(0,0,w,h);
  imgData = imgDataObj.data;
  for (var x=-scrCX; x<scrCX; x++) {
    for (var y=-scrCY; y<scrCY; y++) {
      var i = w*(y+scrCY) + x+scrCX,
          j = y * x + start,
          v1 = (x*x/3+y*y-3e4) / 20,
          v2 = abs(j) % v1;
      if ( v2 < 15 ) {
        imgData[i*4+0] = 155 + ( v2%3<0.5 ? 80 : 0 )
        imgData[i*4+1] = 155 + ( v2%4<0.5 ? 90 : 0 )
        imgData[i*4+2] = 160 + ( v2%2<0.5 ? 90 : 0 )
        imgData[i*4+3] = v2<5 ? v2*70 : v2*17
        //imgData[i*4+3] = (1-(abs(j)%(x*x+y*y-1e4)/400)) * 255;
      }
    }
  }*/
})();

var boidsOnPlanet = function(p) {
  var list = [];
  boids.forEach(function(b){ if(b.planet==p) list.push(b) });
  return list;
};

var ownerOfPlanet = function(p) {
  var boids = boidsOnPlanet(p);
  if (boids.length==0) return -1;
  var owner = boids[0].o;
  boids.forEach(function(b){ owner = (owner+b.o)/2 });
  return owner;
};

Array.prototype.remove = function(item) {
  var newList = [];
  this.forEach(function(i){
    if(i!=item) newList.push(i);
  });
  return newList;
};

/*Array.prototype.rand = function() {
  var index = Math.round( Math.random() * this.length );
  if (index == this.length) index = 0;
  return this[index];
};*/

var landingPos = function(obj, p) {
  return {
    x: p.x + cos(obj.rotate)*(p.r+obj.r),
    y: p.y + sin(obj.rotate)*(p.r+obj.r)
  }
};

var updatePosition = function(obj, inPlanet, planetProximation) {
  var p = obj.planet;
  if (p) { // in a planet
    obj.vx = obj.vy = 0;
    obj.rotateV = (obj.rotateV||0) * 0.99;
    obj.rotate = (obj.rotate||0) + obj.rotateV;
    obj.x = p.x + cos(obj.rotate||0)*(p.r+obj.r);
    obj.y = p.y + sin(obj.rotate||0)*(p.r+obj.r);
    inPlanet(p);
  }
  else { // Object is fling
    for ( var id in planets ) {
      var p = planets[id];
      var dist = distP2P( p, obj );
      // Normal gravity lower to distance. Here never is so far.
      var f = dist.d<999 ? (gConst*p.m)/dist.d : (gConst*p.m)/999;
      obj.vx = (obj.vx||0) + f * dist.x;
      obj.vy = (obj.vy||0) + f * dist.y;
      var proximity = dist.d - p.r - obj.r;
      for ( var limitDist in planetProximation ) {
        // Near to the planet
        if (proximity <= parseInt(limitDist))
          planetProximation[limitDist](p, proximity);
      }
    }
  }
  obj.rotate  %= completeRad;
  if (obj.rotate<0) obj.rotate += completeRad;
  obj.x += obj.vx;
  obj.y += obj.vy;
};

var getAngleToPlanet = function(obj, planet) {
  var dist = distP2P(obj, planet);
  var acos = Math.acos(dist.x);
  var asin = Math.asin(dist.y);
  var angleToPlanet = (asin > 0 ? acos : completeRad - acos);
  return angleToPlanet % completeRad;
};

var addCrew = function(b) {
  ship.crew.push(b);
  boids = boids.remove(b);
  b.shipIO = now();
};

var shipLastExitCrew=0, shipLastJet=0;
var releaseCrew = function() {
  var b = ship.crew[0];
  // Has boid AND 1sec no user up AND 1sec last boid leave the ship
  if ( b && (now()-shipLastJet)>secs(1) &&
       shipLastJet>b.shipIO &&
       (now()-shipLastExitCrew)>secs(.5)
     ) {
    shipLastExitCrew = now();
    b.shipIO = now();
    b.planet = ship.planet;
    b.r = 2;
    b.rotate = ship.rotate + rand(.5);
    boids.push(b);
    ship.crew = ship.crew.remove(b);
  }
};

var newMissile = function(o, x,y, vx,vy) {
  var m = {o:o,  x:x, y:y, r:4,
    vx: vx + cos(ship.rotate) * 2,
    vy: vy + sin(ship.rotate) * 2
  };
  missiles.push(m);
  return m;
}

var newBoid = function(o, r, x,y, vx,vy, rotate, planet, pushToList) {
  var c1 = 40, c2 = -40;
  if (rand()<0) c1*=-1, c2*=-1;
  var b = {
    o: o, r: (r||1+rand()),
    x: (x||0), y: (y||0),
    vx: (vx||0), vy: (vy||0),
    planet:  planet,
    rotate:  (rotate||rand(completeRad)),
    rotateV: rand(.01),
    shipIO:  now()-secs(5),
    color: (o == 0) ?
      randColor(c1/2,40, 90,50, c2,50) :
      randColor(110,50, 40,50, 0,10)
  };
  if (pushToList!==false) boids.push(b);
  return b;
}

//TODO: var newExplosion

var lastMsgToUsr = now();
var msgToUsr = function() {
  lastMsgToUsr = now();
  var index = Math.round( Math.random() * arguments.length );
  if (index == arguments.length) index = 0;
  msgBox.innerHTML = arguments[index];
  msgBox.className = 'visible';
  setTimeout( function(){ msgBox.className='' }, secs(1) );
};

var ticCounter = 0, framesPerSec = 30;

setInterval(function() {

  /*** Updates ****************************************************************/
  (function(){
    if (pause) return;
    ticCounter++;
    var p, dist;

    if ( shipAlive ) {
      var absShipV = abs(ship.vx) + abs(ship.vx);
      if ( absShipV > 1 ) zoom = 2/absShipV;
      else zoom = 2;
      if ( zoom < 0.5 ) zoom = 0.5;
    }
    //focus = sun; zoom = (h/biggerPlanetD)/2.1; // debug

    // Update planets positions:
    for ( var id in planets ) {
      p = planets[id];
      if (!p.d) {
        p.x = p.y = 0;
      } else {
        p.a += p.v;
        var oldx = p.x, oldy = p.y;
        p.x = cos(p.a)*p.d + planets[p.p||'sun'].x;
        p.y = sin(p.a)*p.d + planets[p.p||'sun'].y;
        p.vx = p.x - oldx;
        p.vy = p.y - oldy;
        //log( '1>', id, p.a, p.v, p.d, p.x )
      }
    }

    p = planets;

    /*** Initializations ********************************************************/
    if ( boids.length == 0 ) {
      log('Initialize Boids'); //debug
      for (var i=0; i<13; i++) newBoid(0, 1+rand(), 0,0, 0,0, null, p.p2a);
      newBoid(1, 3, 0,0, 0,0, null, p.p3a);
      newBoid(1, 3, 0,0, 0,0, null, p.p3b);
      newBoid(1, 3, 0,0, 0,0, null, p.p3c);
    }
    if ( ticCounter%(10*framesPerSec) == 0 ) {
      // Invasion from outer space each 10 secs
      // the ship will never see it born
      newBoid(1, 2, (ship.x>0?-1.2:1.2)*biggerPlanetD, rand(4000), 0, rand(10));
    }

    if ( !ship ) {
      log('Initialize Ship'); //debug
      shipAlive = true;
      ship = {
        crew: [newBoid(0, 2, 0,0, 0,0, null, null, false)],
        weapon: true,
        planet: p.p2a,
        rotate: -pi/2,
        r: 10,
        life: 100
      };
      focus = ship;
    }

    if (ship.life < 0) ship.life = 0;
    life.style.width = ship.life + '%';
    if (shipAlive) ship.life += .01;
    if (ship.life > 100) ship.life = 100;

    // Update ship position:
    if (shipAlive) {
      if ( lastMsgToUsr < now()-secs(10) ) { // Much time without a message...
        if (ship.planet) {
          if ( ownerOfPlanet(ship.planet) == 0 ) { // on one of the player's planet
            if ( ship.crew.length < 3 )
              msgToUsr( "",
                "C'mon folks! Enter on the ship.",
                "Full this ship and let's get another planet!"
              );
            else
              msgToUsr(
                "You can takeoff, boss.",
                "Let's get another planet!",
                "The ship is full! Let's get another planet!!!"
              );
          } else if ( ownerOfPlanet(ship.planet) > 0 ) { // Enemy's planet
            if ( ship.crew.length == 0 )
              msgToUsr(
                'This reddish can attack the our landed ship.',
                'They can attack the ship, boss.',
                'What are you waiting for? Takeoff!'
              );
          } else { // Non owned planet
            if ( ship.crew.length == 0 )
              msgToUsr(
                'Takeoff and come back with some crew.',
                'If you had taken some crew, we could owned this planet...'
              );
          }
        } else if ( distP2P(ship,sun).d < orbDist1*.9 ) { // ship is fling near to the sun
          msgToUsr(
            "DANGER!!! DANGER!!!",
            "I hate the sun lower orbit!!!",
            "Boss! The sun can destroy us!",
            "oOooww daddy... Let's go back home... pleezzz?"
          );
        } else if ( distP2P(ship,sun).d > biggerPlanetD*1.1) { // ship is fling far away
          msgToUsr(
            "Where are you going?",
            "We are too far away, boss!",
            "oOooww daddy... Let's go back home... pleezzz?"
          );
        } else { // ship is fling on interplanetary space
          if ( ship.crew.length == 0 )
            msgToUsr("",
              "Let's take some crew, so we can own another planet.", "",
              "Hey! Let's take a crew, so you can own some planet.", "",
              "Bud... You need to take some crew.", "",
              "Boss, where is your green ones?", ""
            );
          else // fly with some crew
            msgToUsr("",
              "Let's take another planet?", "",
              "Uninhabited planets are easier to take.", "",
              "Hey pally, let's rule some reddish planet?", "",
              "Boss, you can let the autopilot to land us.", "",
              "You only need to gently approach the planet. The autopilot land us.",
              "Hey bud, let's fire our missiles against a reddish planet?"
            );
        }
      }
      updatePosition(ship,
        function(p) {
          ship.rotateV = 0;
          if (boidsOnPlanet(p).length < 7) releaseCrew();
          else if (ownerOfPlanet(p)>0.3) msgToUsr('Are you crazy? We will die!');
        },
        {
          15: function(p, proximity) { // Near to the planet
            // Auto pilot try to help to align the ship for landing
            var angleToPlanet = getAngleToPlanet(ship, p);
            // Remove near to zero jump (useless complete turn the ship)
            if ( angleToPlanet < pi/2 && ship.rotate > pi*1.5 ) ship.rotate -= completeRad;
            if ( angleToPlanet > pi*1.5 && ship.rotate < pi/2 ) ship.rotate += completeRad;
            // Adjust ship rotation
            if ( angleToPlanet-ship.rotate > 0.2 ) ship.rotate += 0.1;
            else if ( angleToPlanet-ship.rotate > 0.1 ) ship.rotate += 0.03;
            if ( angleToPlanet-ship.rotate < -0.2 ) ship.rotate -= 0.1;
            else if ( angleToPlanet-ship.rotate < -0.1 ) ship.rotate -= 0.03;
          },
          0: function(p, proximity) { // Touch the planet
            if (p == sun) { // Ship die if dropped into sun
              shipDie('You crash in the sun before colonize all start system.');
              explosions.push({ x:ship.x, y:ship.y, r:10 });
            } else { // Ship landed a planet
              if (proximity < -1.5) { // Too hard! Explode
                ship.life -= 90;
                explosions.push({ x:ship.x, y:ship.y, r:10 });
                play('explosion');
                if (ship.life < 0) shipDie(
                  'You crash in a planet before colonize all start system.'+
                  '<p/><strong>Impact: '+
                   Math.round(proximity*-100)+'uF.</strong> Maximum is 150uF.'
                );
                else msgToUsr(
                  'Slow down! The <strong>impact was '+
                   Math.round(proximity*-100)+'uF.</strong>, maximum is 150uF. '+
                  'You was just about to explode.'
                );
              } else if ( distP2P(ship, landingPos(ship, p)).d > 10 ) {
                ship.life -= 50;
                explosions.push({ x:ship.x, y:ship.y, r:10 });
                play('explosion');
                if (ship.life < 0) shipDie(
                  'You crash in a planet before colonize all start system.'+
                  '<p/><strong>Bad angle.</strong>'
                );
                else msgToUsr('Trust on your landing autopilot.');
              }
              ship.planet = p;
              ship.rotate = getAngleToPlanet(ship, p);
            }
          }
        }
      );
      if (usrInput.btU) {
        if (ship.planet) {
          ship.vx = cos(ship.rotate) * 0.2 + ship.planet.vx;
          ship.vy = sin(ship.rotate) * 0.2 + ship.planet.vy;
          ship.planet = false;
        } else {
          ship.vx += cos(ship.rotate) * 0.1;
          ship.vy += sin(ship.rotate) * 0.1;
        }
      }
      if ( usrInput.btL ) ship.rotateJet = -0.01;
      else if ( usrInput.btR ) ship.rotateJet = 0.01;
      else ship.rotateJet = 0;
      ship.rotateV += ship.rotateJet; // Side jets increase angular velocity
      ship.rotate  += ship.rotateV;   // Rotation state increased by angular velocity
      ship.rotateV *= 0.99;           // Rotation friction (Yeah... this is a fake space)
    }

    // Update missiles
    missiles.forEach(function(m) {
      updatePosition(m, function(){},
        {
          2: function(p, proximity) { // Touch the planet
            play('explosion');
            missiles = missiles.remove(m);
            explosions.push({ x:m.x, y:m.y, r:25 });
            // Kill near boids
            var deadCounter = 0;
            boids.forEach(function(b){
              if ( distP2P(m,b).d < 40 ) {
                deadCounter += b.o==0 ? -99 : 1;
                boids = boids.remove(b);
                explosions.push({ x:b.x, y:b.y, r:2, inc:.2 });
              }
              if ( deadCounter < 0 ) { // friend killed
                msgToUsr(
                  "OMG! You killed Kenny. You bastard!",
                  "Ops... You shot a green one.",
                  "Do you know who is your team?"
                );
              } else if ( deadCounter == 0 ) { // no one killed
                msgToUsr( "",
                  "How can you miss that!?",
                  "Thank you, for the lost missile.",
                  "Did you know how much that missile costs to our economy?"
                );
              } else { // enemy killed
                msgToUsr( "",
                  "Suck it!", "Suck it reddish!",
                  "A reddish cleaner missile.",
                  "This is MY planet!"
                );
              }
            });
          }
        }
      );
      m.t = (m.t||0)+1;
      if ( m.t > 1000 ) { // to much time. Die now.
        missiles = missiles.remove(m);
        explosions.push({ x:m.x, y:m.y, r:4 });
      }
    });

    // Update boids positions:
    boids.forEach(function(b){
      updatePosition(b,
        function(p) { // in a planet callback
          if ( ship.planet == p ) {
            // The player ship is in this boid's planet!
            if (
                 ( boidsOnPlanet(p).length < 4        // Too few boids here...
                 || (now()-b.shipIO) < secs(5) )      // Exit the ship right now
                 && abs(ship.rotate-b.rotate) < pi/2  // Near to the ship?
               ) { // Run away!
              b.rotateV += b.rotate<ship.rotate ? -2e-4 : 2e-4;
            } else if (boidsOnPlanet(p).length > 3) { // Get the ship!
              b.rotateV += b.rotate<ship.rotate ? 1e-4 : -1e-4;
            } else {
              b.rotateV += b.rotate<ship.rotate ? -1e-5 : 1e-5;
            }
            if (
                 abs(ship.rotate-b.rotate) < .01 &&  // boid is above the ship
                 ship.crew.length < 3 &&             // there is room for it
                 (now()-b.shipIO) > secs(3)          // Was not in the ship
               ) {
              if ( shipAlive ) {
                if ( b.o == 0 ) addCrew(b);     // is one of the player's boids
                else {                          // enemy boid attacks the ship
                  ship.life -= 1;
                  explosions.push({ x:b.x, y:b.y, r:2, inc:.2 });
                  if (ship.life < 0) shipDie(
                    'Enemy boids has destroyed your ship.'
                  );
                  else msgToUsr('Enemy boids are attacking the ship!');
                }
              }
            }
          } else {
            // No ship here... boring life...
            // Never stops to walk the surface
            if ( (b.rotateV||0) == 0 ) b.rotateV = .01;
            if ( abs(b.rotateV) < .002 ) {
              // Prevent boids to walk all together, and never touch:
              if( rand()<-0.49 ) b.rotateV *= -1; // 1% chance to change direction
              b.rotateV*=1.5;
            }
          }
          // grow boid
          if ( b.r <= 2 ) { // not so big for any planet
            b.r += b.o==0 ? 0.004 : 0.002;
          }
          else if ( boidsOnPlanet(p).length < p.r/6 ) { // not too many
            // only still growing an reproduct if there is space
            if ( b.r <= 3 ) b.r += 0.003;
            else if ( rand() < -.49 ) { // 1% chance for reproduction
              b.r = 1.5;
              newBoid(b.o, 1+rand(.5), 0,0, 0,0, b.rotate+rand(.001), p);
            }
          }
        },
        {
          0: function(p, proximity) { // Touch the planet
            if (p == sun) { // Boid die if dropped into sun
              boids = boids.remove(b);
              explosions.push({ x:b.x, y:b.y, r:2, inc:.2 });
            } else { // Boid landed a planet
              b.planet = p;
              b.rotate = getAngleToPlanet(b, p);
            }
          }
        }
      );

      // test boid to boid collision
      boids.forEach(function(b2){
        if ( b2 != b ) {
          dist = distP2P(b2,b);
          if ( (dist.d - b.r - b2.r) < 0 ) {
            if (b.o != b2.o) { // Boids conflict. Both die.
              boids = boids.remove(b);
              boids = boids.remove(b2);
              explosions.push({ x:b.x, y:b.y, r:2, inc:.2 });
              explosions.push({ x:b2.x, y:b2.y, r:2, inc:.2 });
            } else { // Friend touch
              if (b.planet) { // in a planet
                var inc = b.r/5000 * ( b.rotate<b2.rotate ? 1 : -1 );
                b.rotateV  -= inc;
                b2.rotateV += inc;
              } else { // in the space
                b.vx += (1-dist.x)/100;
                b.vy += (1-dist.y)/100;
                b2.vx -= (1-dist.x)/100;
                b2.vy -= (1-dist.y)/100;
              }
            }
          }
        }
      });
    });

  })(); // end Updates

  // Adjust camera:
  var newZ = ( zoom + z*9 ) / 10;
  //macro sign: ( @1<0 ? -1 : 1 )
  if ( shipAlive && abs(newZ-z)>0.005 ) z += 0.005 * sign(newZ-z);
  else z = newZ;
  viewCX = scrCX - focus.x * z;
  viewCY = scrCY - focus.y * z;
  if ( z < 1 ) {
    vCX = ( viewCX + vCX*10 ) / 11;
    vCY = ( viewCY + vCY*10 ) / 11;
  } else {
    vCX = ( viewCX + vCX*5 ) / 6;
    vCY = ( viewCY + vCY*5 ) / 6;
  }

  var mapZ = (map.height/biggerPlanetD)/2.2;

  /******** Draw elements *****************************************************/
  // Clear all
  ctx.clearRect(0,0,w,h);
  ctxMap.clearRect(0,0,map.width,map.height);
  //ctxMap.fillStyle = 'rgba(0,0,0,0.02)';
  //ctxMap.fillRect (0,0,map.width,map.height);
  // Stars
  //ctx.putImageData(imgDataObj, 0, 0);
  // Sun rays
  // createRadialGradient's first ray must to be 0 for android.
  var sunRayZoom = z>.5 ? .45 + z/10 : z;
  //macro sunRayLength: sunRayZoom*sun.r*3
  var grd = ctx.createRadialGradient(vCX, vCY, 0, vCX, vCY, sunRayLength);
  grd.addColorStop(0, 'rgb('+sun.c[0]+')');
  grd.addColorStop(0.2, 'rgba('+sun.c[0]+',0.5');
  grd.addColorStop(1, 'rgba(0,0,0,0.5)');
  ctx.fillStyle = grd;
  //ctx.fillStyle = '#F80';
  ctx.beginPath();
  var timeDif = (now() - start)/16000;
  for (var i=timeDif; i<timeDif+7; i+=0.314*2) {
    ctx.arc( vCX, vCY, sunRayLength, i,i+0.314 );
    ctx.lineTo(vCX, vCY);
  }
  ctx.closePath();
  ctx.fill();
  // Draw Planets
  for ( var id in planets ) {
    var p = planets[id];
    // Planet Bright
    var grd = ctx.createRadialGradient(z*p.x+vCX, z*p.y+vCY, 0,
                                       z*p.x+vCX, z*p.y+vCY, z*p.r*2);
    grd.addColorStop(0, 'rgb('+p.c[1]+')');
    grd.addColorStop(0.48, 'rgb('+p.c[1]+')');
    grd.addColorStop(0.48, 'rgba('+p.c[2]+','+(p==sun?0.6:0.3*(z>.5?z:.5))+')');
    grd.addColorStop(1, 'rgba(0,0,0,0)');
    ctx.fillStyle = grd;
    ctx.beginPath();
    ctx.arc( z*p.x+vCX, z*p.y+vCY, z*p.r*(p==sun?3:2), 0,7 );
    ctx.closePath();
    ctx.fill();
    // Planet Volume Shadow
    var grd = ctx.createRadialGradient(z*p.x+vCX, z*p.y+vCY, 0, //z*p.r/9,
                                       z*p.x+vCX, z*p.y+vCY, z*p.r);
    grd.addColorStop(0, 'rgba('+p.c[1]+',0)');
    grd.addColorStop(1, 'rgb('+p.c[0]+')');
    ctx.fillStyle = grd;
    ctx.beginPath();
    ctx.arc( z*p.x+vCX, z*p.y+vCY, z*p.r, 0,7 );
    ctx.closePath();
    ctx.fill();
    // Planet on the map
    var owner = ownerOfPlanet(p);
    var ownerColor;
    if (owner == -1)     ownerColor = 'rgb(220,220,220)';
    else if (owner == 0) ownerColor = 'rgb(50,240,50)';
    else if (owner == 1) ownerColor = 'rgb(240,100,50)';
    else ownerColor = 'rgb(255,0,255)';
    ctxMap.fillStyle = p==sun? '#FF7' : ownerColor;
    ctxMap.beginPath();
    ctxMap.arc( mapZ*p.x+map.cx, mapZ*p.y+map.cy, mapZ*p.r, 0,7 ); //(p==sun?3:0.6)
    ctxMap.closePath();
    ctxMap.fill();
  }
  // Draw Boids
  //boids.forEach(function(b){
  var totB = boids.length;
  for ( var i=0; i<totB; i++ ) {
    var b = boids[i];
    ctx.strokeStyle = 'rgba('+b.color[1]+',0.6)';
    // Velocity tail
    ctx.beginPath();
    ctx.moveTo( z*b.x+vCX, z*b.y+vCY );
    ctx.lineTo( z*b.vx*-10+z*b.x+vCX, z*b.vy*-10+z*b.y+vCY );
    ctx.closePath();
    ctx.stroke();
    // Boid body
    ctx.beginPath();
    ctx.strokeStyle = 'rgb('+b.color[0]+')';
    ctx.fillStyle = 'rgb('+b.color[1]+')';
    ctx.arc( z*b.x+vCX, z*b.y+vCY, z*b.r, 0,7 );
    ctx.closePath();
    ctx.fill();
    ctx.lineWidth = 0.8*z;
    ctx.stroke();

    /*
    ctx.beginPath(); // debug
    ctx.strokeStyle = '#FFF'; // debug
    ctx.moveTo( z*b.x+vCX, z*b.y+vCY ); // debug
    ctx.lineTo( z*b.vx*10+z*b.x+vCX, z*b.vy*10+z*b.y+vCY ); // debug
    ctx.stroke(); // debug
    */
  }
  //});

  // Draw missiles
  missiles.forEach(function(m) {
    ctx.fillStyle = 'rgb(255,'+Math.round((sin(ticCounter/2)+1)*127)+',0)';
    ctx.strokeStyle = 'rgb(255,'+Math.round((cos(ticCounter/2)+1)*127)+',0)';
    ctx.beginPath();
    ctx.arc( z*m.x+vCX, z*m.y+vCY, z*m.r-1, 0,7 );
    ctx.fill();
    ctx.lineWidth = 1.5*z;
    ctx.stroke();
    ctxMap.fillStyle = ctx.fillStyle;
    ctxMap.beginPath();
    ctxMap.arc( mapZ*m.x+map.cx, mapZ*m.y+map.cy, mapZ*m.r*4, 0,7 );
    ctxMap.closePath();
    ctxMap.fill();
  });

  // Draw Ship
  if (shipAlive) {
    ctxMap.fillStyle = '#6BF';
    ctxMap.beginPath();
    ctxMap.arc( mapZ*ship.x+map.cx, mapZ*ship.y+map.cy, 0.9, 0,7 );
    ctxMap.closePath();
    ctxMap.fill();
    ctxMap.strokeStyle = 'rgba(0,200,200,0.5)';
    ctxMap.arc( mapZ*ship.x+map.cx, mapZ*ship.y+map.cy, 10,
                ship.rotate, ship.rotate+turn3 );
    ctxMap.closePath();
    ctxMap.arc( mapZ*ship.x+map.cx, mapZ*ship.y+map.cy, 10,
                ship.rotate+turn3, ship.rotate+turn3*2 );
    ctxMap.closePath();
    ctxMap.arc( mapZ*ship.x+map.cx, mapZ*ship.y+map.cy, 10,
                ship.rotate+turn3*2, ship.rotate+turn3*3 );
    ctxMap.closePath();
    ctxMap.stroke();
    ctx.save();
    ctx.translate( z*ship.x+vCX, z*ship.y+vCY );
    ctx.rotate(ship.rotate);
    var scale = z<1 ? (z+1)/2 : z;
    ctx.scale(scale,scale);
    /*
    ctx.strokeStyle = 'rgba(255,255,255,0.2)'; // debug
    ctx.beginPath(); // debug
    ctx.arc( 0, 0, 20, 0,7 ); // debug
    ctx.stroke(); // debug
    */
    if (usrInput.btU) { // Back Fire
      grd = ctx.createRadialGradient(-9+rand(1),0, 1, -11,0, 4);
      grd.addColorStop(0, '#FF0');
      grd.addColorStop(1, '#F00');
      ctx.fillStyle = grd;
      ctx.beginPath();
      ctx.moveTo(-7.5,0);
      ctx.bezierCurveTo( -11,-7.5, -13,-.5, -20+rand(2),0 );
      ctx.bezierCurveTo( -13,1,  -11,7.5, -7.5,0 );
      ctx.fill();
    }
    if (usrInput.btR) { // Fire Clockwise
      grd = ctx.createRadialGradient(7.5,-5, 0, 7.5,-6, 2);
      grd.addColorStop(0, '#FF0');
      grd.addColorStop(1, '#F00');
      ctx.fillStyle = grd;
      ctx.beginPath();
      ctx.moveTo(7.5,-4);
      ctx.bezierCurveTo( 10,-6.5, 8,-6.5, 7.5,-11+rand(2) );
      ctx.bezierCurveTo( 7,-6.5,  5,-6.5, 7.5,-4 );
      ctx.fill();
    }
    if (usrInput.btL) { // Fire Anti-Clockwise
      grd = ctx.createRadialGradient(7.5,5, 0, 7.5,6, 2);
      grd.addColorStop(0, '#FF0');
      grd.addColorStop(1, '#F00');
      ctx.fillStyle = grd;
      ctx.beginPath();
      ctx.moveTo(7.5,4);
      ctx.bezierCurveTo( 10,6.5, 8,6.5, 7.5,11+rand(2) );
      ctx.bezierCurveTo( 7,6.5,  5,6.5, 7.5,4 );
      ctx.fill();
    }
    // Wings
    ctx.fillStyle = '#599';
    ctx.beginPath();
    ctx.moveTo(-2.5,-9.5);
    ctx.bezierCurveTo( 7.5,-12.5, 7.5,12.5, -2.5,9.5 );
    ctx.closePath();
    ctx.fill();
    // Body
    grd = ctx.createRadialGradient(1, 0, 0, 1, 0, 10);
    grd.addColorStop(0, '#F0F8F8');
    grd.addColorStop(1, '#799');
    ctx.fillStyle = grd;
    ctx.beginPath();
    ctx.moveTo(-9,-4.5);
    ctx.bezierCurveTo( 0,-10, 9.5,-4, 10,0 );
    ctx.bezierCurveTo( 10,4,  0,10, -9,4.5 );
    ctx.lineTo(-8, 0);
    ctx.fill();
    // Staff Boids
    ctx.lineWidth = 1/(z+1/2);
    ctx.strokeStyle = '#181';
    var drawCrew = function(pos) {
      var t = ship.crew;
      ctx.beginPath();
      ctx.fillStyle = t[pos] ? 'rgb('+t[pos].color[1]+')' : '#888';
      ctx.arc( -4+(pos*4),0, 2, 0,7 );
      ctx.closePath();
      ctx.fill(); ctx.stroke();
    }
    drawCrew(0);
    drawCrew(1);
    drawCrew(2);
    ctx.restore();
  }

  // Draw explosions
  explosions.forEach(function(e) {
    // TODO: update explosion position with origin vx,vy
    e.t = e.t ? e.t+1 : .5;
    ctx.fillStyle = 'rgba(255,255,255,'+(20-e.t)/20+')';
    ctx.beginPath();
    ctx.arc( z*e.x+vCX, z*e.y+vCY, z*(e.r+e.t*(e.inc||1)), 0,7 );
    ctx.fill();
    if (e.t>19) explosions = explosions.remove(e); // explosion end
  });

}, 1000/framesPerSec);

d.onclick = function (ev) {
  if (d.mozFullScreenEnabled) b.mozRequestFullScreen();
  if (d.webkitFullscreenEnabled) b.webkitRequestFullScreen();
};

var pressBt = function(bt, on) {
  shipLastJet = now();
  usrInput[bt] = on;
  window[bt].className = on ? 'pressed' : ''
};

var fireWeapon = function () {
  if ( ship.weapon ) {
    btW.className = 'empty';
    ship.weapon = false;
    newMissile(0, ship.x, ship.y,
      (ship.planet ? ship.planet.vx : ship.vx) + cos(ship.rotate) * 2,
      (ship.planet ? ship.planet.vy : ship.vy) + sin(ship.rotate) * 2
    );
    play('gun');
    setTimeout(function(){
      btW.className = '';
      ship.weapon = true;
    }, secs(4));
  }
};

var pressDialogBt = function () {
};

d.onkeydown = function (ev) {
  switch (ev.keyCode) {
    case 38: pressBt('btU', true); break;
    case 37: pressBt('btL', true); break;
    case 39: pressBt('btR', true); break;
    case 32: fireWeapon(); break;
  }
};

d.onkeyup = function (ev) {
  switch (ev.keyCode) {
    case 38: pressBt('btU', false); break;
    case 37: pressBt('btL', false); break;
    case 39: pressBt('btR', false); break;
    case 13: pressDialogBt(); break;
  }
};

btL.addEventListener("touchstart", function(){ pressBt('btL', true) });
btR.addEventListener("touchstart", function(){ pressBt('btR', true) });
btU.addEventListener("touchstart", function(){ pressBt('btU', true) });
btW.addEventListener("touchstart", function(){ fireWeapon() });
btL.addEventListener("touchend", function(){ pressBt('btL', false) });
btR.addEventListener("touchend", function(){ pressBt('btR', false) });
btU.addEventListener("touchend", function(){ pressBt('btU', false) });

ctrlQ1.onclick = function(){ qualityLevel = 1 };
ctrlQ2.onclick = function(){ qualityLevel = 2 };
ctrlQ3.onclick = function(){ qualityLevel = 3 };
ctrlM.onclick  = function(){ this.checked ? music.play() : music.pause() };
ctrlS.onclick  = function(){ allowSound = this.checked };
ctrlQ1.click();
ctrlM.checked = true;
ctrlS.checked = true;

} catch (e) {
  alert(e)
  throw e;
}
