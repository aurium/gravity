"use strict";

try {

var log = function() { // debug
  var args = []; // debug
  for (var i=0; i<arguments.length; i++) args.push(arguments[i]); // debug
  /Android/.test(navigator.userAgent) ? // debug
    0: //alert(args.join(' - ')) : // debug
    console.log.apply(console,args); // debug
}; // debug

var abs = Math.abs,
    sin = Math.sin,
    cos = Math.cos,
    pi = Math.PI,
    completeRad = 2 * pi, // complete revolution
    deg90 = pi/2,
    turn3 = completeRad/3;

var biteLimit = function(val) {
  return val>255 ? 255 : ( val<0 ? 0 : val );
}

var rand = function(num) { return (Math.random()-0.5) * (num||1) };

var music, playAudio;
// include audio

var randColor = function(mr,vr,mg,vg,mb,vb) {
  var r1 = Math.round( mr + rand(vr) ),
      g1 = Math.round( mg + rand(vg) ),
      b1 = Math.round( mb + rand(vb) ),
      r2 = Math.round( r1*2.8 ),
      g2 = Math.round( g1*2.8 ),
      b2 = Math.round( b1*2.8 ),
      r3 = Math.round( r1*3.6 ),
      g3 = Math.round( g1*3.6 ),
      b3 = Math.round( b1*3.6 );
      biteLimit(r2);
      biteLimit(g2);
      biteLimit(b2);
      biteLimit(r3);
      biteLimit(g3);
      biteLimit(b3);
  return [ [r1,g1,b1].join(','), [r2,g2,b2].join(','), [r3,g3,b3].join(',') ];
};

var distP2P = function(p1, p2) {
  var dx = p1.x - p2.x,
      dy = p1.y - p2.y,
      d = Math.sqrt( dx*dx + dy*dy ),
      x = dx / d,
      y = dy / d;
  return { x:x, y:y, d:d }
};

var ctx = c.getContext('2d'),
    ctxMap = map.getContext('2d'),
    d = document,
    b = d.body,
    touchable = false,
    qualityLevel = 1,
    allowSound = true,
    pause = false,
    secs = function(num) { return num*1000 },
    //macro orbDist1: 500
    //macro orbDist2: 900
    //macro orbDist3: 1400
    //macro orbDist4: 1900
    //macro orbVel1: .0020
    //macro orbVel2: .0010
    //macro orbVel3: .0005
    //macro orbVel4: .0002
    planets = {
      sun:{ m:200, c:['255,180,0','255,255,10','255,255,80'], r:150+rand(10) },

      // Orbit 1
      p1a:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:rand() },

      p1b:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:2+rand() },

      p1c:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:4+rand() },

      // Orbit 2
      p2a:  { m:30, c:['0,100,180','0,180,220','50,220,255'],
              r:40, d:orbDist2+rand(50), v:orbVel2, a:0.0+rand()*.8 },
      m2a1: { m:20, c:['100,100,100','200,200,200','250,250,250'],
              r:25,  d:130+rand(10),  v:orbVel1*4,  a:rand(7), p:'p2a' },

      p2b:  { m:30, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist2+rand(50), v:orbVel2, a:1.5+rand()*.8 },

      p2c:  { m:30, c:randColor(100,60,80,80,0,120),
              r:45+rand(10), d:orbDist2+rand(50), v:orbVel2, a:3.0+rand()*.8 },

      p2d:  { m:30, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist2+rand(50), v:orbVel2, a:4.5+rand()*.8 },

      // Orbit 3
      p3a:  { m:50, c:randColor(100,60,80,80,0,120),
              r:70+rand(15), d:orbDist3+rand(20), v:orbVel3, a:2+rand() },

      p3b:  { m:50, c:randColor(100,60,80,80,0,120),
              r:80+rand(15), d:orbDist3+rand(20), v:orbVel3, a:4+rand() },
      m3b1: { m:20, c:randColor(100,60,80,80,0,120),
              r:20+rand(2),  d:160+rand(10),   v:orbVel3*6,  a:rand(7), p:'p3b' },
      m3b2: { m:20, c:randColor(100,60,80,80,0,120),
              r:18+rand(3),  d:230+rand(10),  v:orbVel3*3,  a:rand(), p:'p3b' },
      m3b3: { m:20, c:randColor(100,60,80,80,0,120),
              r:18+rand(3),  d:230+rand(10),  v:orbVel3*3,  a:3+rand(), p:'p3b' },

      p3c:  { m:50, c:randColor(100,60,80,80,0,120),
              r:70+rand(15), d:orbDist3+rand(20), v:orbVel3, a:0+rand() },

      // Orbit 4
      p4a:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:0.0+rand()*.8 },

      p4b:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:1.5+rand()*.8 },

      p4c:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:3.0+rand()*.8 },

      p4d:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:4.5+rand()*.8 }
    },
    biggerPlanetD = orbDist4,
    boids = [], // see "Initialize Boids"
    missiles = [],
    cannons = [],
    sun = planets.sun,
    // zoom: the wanted zoom.
    // z: the current zoom.
    // scrC*: the center of the screen, calculated on start and each resize.
    // viewC*: the related wanted position to put on the center of the screen.
    // vC*: the current related position to put on the center of the screen.
    vCX = null,
    vCY = null,
    viewCX = 0,
    viewCY = 0,
    scrCX = 0,
    scrCY = 0,
    w = 0,
    h = 0,
    z = 0.1,
    zoom = 1,
    ship = null, // see "Initialize Ship"
    shipAlive = false,
    usrInput = {},
    explosions = [],
    focus = ship,
    imgDataObj, imgData, imgDataLength,
    gConst = 0.01, //6.674e-11
    pixelRatio = window.devicePixelRatio,
    now = Date.now,
    start = now();

viewport.setAttribute('content',
  'width=device-width, user-scalable=no, initial-scale=' + (1/pixelRatio)
);
if ( pixelRatio >= 2 ) b.className += ' pix20';
else if ( pixelRatio > 1 ) b.className += ' pix15';

try {
  if (document.createEvent("TouchEvent")) {
    b.className += ' touchable';
    touchable = true;
  }
} catch(e) { }

var shipDamage = function(points, dieMsg, aliveFunc) {
  ship.life -= points;
  if (ship.life <= 0) {
    ship.life = 0;
    newExplosion(ship, true, 20);
    shipDie(dieMsg);
    return false;
  }
  if (aliveFunc) aliveFunc();
};

var shipDie = function(txt, showNow) {
  playAudio('nearExplosion');
  shipAlive = false;
  if (!showNow) return setTimeout( function(){ shipDie(txt,true) }, 500 );
  focus = sun;
  zoom = (h/biggerPlanetD)/2;
  if (!txt) txt = 'You die.'
  deadMsg.innerHTML += txt +
    '<a class="bt" onclick="document.location.reload()">Restart</a>';
  pressDialogBt = function(){ document.location.reload() };
  deadMsg.style.display = 'block';
};

ctrl.onclick = function() {
  pause = true;
  pressDialogBt = function(){ ctrlClose.click(); };
  ctrlBox.style.display = 'block';
};

ctrlClose.onclick = function() {
  pause = false;
  ctrlBox.style.display = 'none';
};

(window.onresize = function(e) {
  if (vCX==null) {
    vCX = planets.p2a.d/2;
    vCY = planets.p2a.d/2;
  }
  scrCX = (c.width = w = d.documentElement.clientWidth) / 2;
  scrCY = (c.height = h = d.documentElement.clientHeight) / 2;
  map.cx = (map.width = mapBox.clientWidth - 10) / 2;
  map.cy = (map.height = mapBox.clientHeight - 10) / 2;
  ctxMap.fillStyle = '#333';
  ctxMap.fillRect (0,0,map.width,map.height);
  log(w,h, map.width,map.height);
  /*
  log( 'resize', scrCX,w, scrCY,h ); // debug
  imgDataObj = ctx.getImageData(0,0,w,h);
  imgData = imgDataObj.data;
  for (var x=-scrCX; x<scrCX; x++) {
    for (var y=-scrCY; y<scrCY; y++) {
      var i = w*(y+scrCY) + x+scrCX,
          j = y * x + start,
          v1 = (x*x/3+y*y-3e4) / 20,
          v2 = abs(j) % v1;
      if ( v2 < 15 ) {
        imgData[i*4+0] = 155 + ( v2%3<0.5 ? 80 : 0 )
        imgData[i*4+1] = 155 + ( v2%4<0.5 ? 90 : 0 )
        imgData[i*4+2] = 160 + ( v2%2<0.5 ? 90 : 0 )
        imgData[i*4+3] = v2<5 ? v2*70 : v2*17
        //imgData[i*4+3] = (1-(abs(j)%(x*x+y*y-1e4)/400)) * 255;
      }
    }
  }*/
})();

var boidsOnPlanet = function(p) {
  if (!p) return [];
  var list = [];
  boids.forEach(function(b){ if(b.planet==p) list.push(b) });
  return list;
};

var ownerOfPlanet = function(p) {
  var boids = boidsOnPlanet(p);
  if (boids.length==0) return -1;
  var owner = boids[0].o;
  boids.forEach(function(b){ owner = (owner+b.o)/2 });
  return owner;
};

var planetGroups = function() {
  var p, groups = { greens:[], reddish:[], conflict:[], total:0 };
  for ( var id in planets ) {
    p = planets[id];
    groups.total++;
    if (ownerOfPlanet(p)==0) groups.greens.push(p);
    else if (ownerOfPlanet(p)==1) groups.reddish.push(p);
    else groups.conflict.push(p);
  }
  return groups;
}

Array.prototype.remove = function(item) {
  var newList = [];
  this.forEach(function(i){
    if(i!=item) newList.push(i);
  });
  return newList;
};

/*Array.prototype.rand = function() {
  var index = Math.round( Math.random() * this.length );
  if (index == this.length) index = 0;
  return this[index];
};*/

var landingPos = function(obj, p) {
  return {
    x: p.x + cos(obj.rotate)*(p.r+obj.r),
    y: p.y + sin(obj.rotate)*(p.r+obj.r)
  }
};

var updatePosition = function(obj, inPlanet, planetProximation) {
  var p = obj.planet;
  if (p) { // in a planet
    obj.vx = obj.vy = 0;
    obj.rotateV = (obj.rotateV||0) * 0.99;
    obj.rotate = (obj.rotate||0) + obj.rotateV;
    obj.x = p.x + cos(obj.rotate||0)*(p.r+obj.r);
    obj.y = p.y + sin(obj.rotate||0)*(p.r+obj.r);
    if (inPlanet) inPlanet(p);
  }
  else { // Object is fling
    for ( var id in planets ) {
      var p = planets[id];
      var dist = distP2P( p, obj );
      // Normal gravity lower to distance. Here never is so far.
      var f = dist.d<999 ? (gConst*p.m)/dist.d : (gConst*p.m)/999;
      obj.vx = (obj.vx||0) + f * dist.x;
      obj.vy = (obj.vy||0) + f * dist.y;
      var proximity = dist.d - p.r - obj.r;
      if (planetProximation) for ( var limitDist in planetProximation ) {
        // Near to the planet
        if (proximity <= parseInt(limitDist))
          planetProximation[limitDist](p, proximity);
      }
    }
  }
  obj.rotate  %= completeRad;
  if (obj.rotate<0) obj.rotate += completeRad;
  obj.x += obj.vx;
  obj.y += obj.vy;
};

var getAngleToPlanet = function(obj, planet) {
  var dist = distP2P(obj, planet);
  var acos = Math.acos(dist.x);
  var asin = Math.asin(dist.y);
  var angleToPlanet = (asin > 0 ? acos : completeRad - acos);
  return angleToPlanet % completeRad;
};

var addCrew = function(b) {
  ship.crew.push(b);
  boids = boids.remove(b);
  b.shipIO = now();
  if (b.planet) onUpdateBoidsOnPlanet('addToShip', b.planet);
  b.planet = null;
};

var shipLastExitCrew=0, shipLastJet=0;
var releaseCrew = function() {
  var b = ship.crew[0];
  // Has boid AND 1sec no user up AND 1sec last boid leave the ship
  if ( b && (now()-shipLastJet)>secs(1) &&
       shipLastJet>b.shipIO &&
       (now()-shipLastExitCrew)>secs(.5)
     ) {
    shipLastExitCrew = now();
    b.shipIO = now();
    b.planet = ship.planet;
    b.rotate = ship.rotate + rand(.5);
    boids.push(b);
    ship.crew = ship.crew.remove(b);
    onUpdateBoidsOnPlanet('playerLanding', b.planet);
  }
};

var newCannon = function(planet, rotate) {
  var c = {o:1, planet:planet, rotate:rotate||0, r:10, build:0, lastShot:0};
  cannons.push(c);
  return c;
};

var getCannonFromPlanet = function(planet) {
  for ( var c,i=0; c=cannons[i]; i++ )
    if (c.planet==planet) return c;
  return false;
};

var buildCannonIfCan = function(planet) {
  var minBoids = 7, groups = planetGroups();
  if ( groups.greens.length > groups.total*.5 ) minBoids = 5;
  if ( groups.greens.length > groups.total*.8 ) minBoids = 3;
  if ( ownerOfPlanet(planet)==1                   // This is a reddish planet
       && boidsOnPlanet(planet).length > minBoids // Has enough boids
       && !getCannonFromPlanet(planet)            // Dont has a cannon
     ) {
    newCannon(planet);
  }
}

var destroyCannon = function(cannon) {
  if (!cannon) return false;
  newExplosion(cannon, true, 20);
  if ( ownerOfPlanet(cannon.planet) == 1 ) cannon.build = -5;
  else cannons = cannons.remove(cannon);
  return true;
};

var newMissile = function(o, x,y, vx,vy) {
  var m = {o:o,  x:x, y:y, r:4, vx:vx, vy:vy };
  missiles.push(m);
  return m;
};

var newBoid = function(o, r, x,y, vx,vy, rotate, planet, pushToList) {
  var c1 = 40, c2 = -40;
  if (rand()<0) c1*=-1, c2*=-1;
  var b = {
    o: o, r: (r||1+rand()),
    x: (x||0), y: (y||0),
    vx: (vx||0), vy: (vy||0),
    planet:  planet,
    rotate:  (rotate||rand(completeRad)),
    rotateV: rand(.01),
    shipIO:  now()-secs(5),
    color: (o == 0) ?
      randColor(c1/2,40, 90,50, c2,50) :
      randColor(110,50, 40,50, 0,10)
  };
  if (pushToList!==false) boids.push(b);
  if (planet) onUpdateBoidsOnPlanet('born', planet);
  return b;
};

var boidDie = function(b) {
  boids = boids.remove(b);
  if (b.planet) onUpdateBoidsOnPlanet('die', b.planet);
};

var newExplosion = function(sourceObj, withSound, r, inc) {
  if ( sourceObj instanceof Array ) {
    var mover = sourceObj[1].planet ? sourceObj[1].planet : sourceObj[1];
    sourceObj = sourceObj[0];
  } else {
    var mover = sourceObj.planet ? sourceObj.planet : sourceObj;
  }
  explosions.push({
    x: sourceObj.x, y: sourceObj.y,
    vx: mover.vx, vy: mover.vy,
    r: r||10, inc: inc||1
  });
  if (withSound) {
    if ( distP2P(ship, sourceObj).d < (w/z)/3 ) playAudio('nearExplosion');
    else playAudio('distantExplosion');
  }
};

var lastMsgToUsr = now();
var msgToUsr = function() {
  lastMsgToUsr = now();
  var index = Math.round( Math.random() * arguments.length );
  if (index == arguments.length) index = 0;
  msgBox.innerHTML = arguments[index];
  msgBox.className = 'visible';
  setTimeout( function(){ msgBox.className='' }, secs(1) );
};

var onUpdateBoidsOnPlanet = function(eventType, planet) {
  var owner;
  buildCannonIfCan(planet);
  switch (eventType) {
    case 'born': /* noting more to say */ break;
    case 'die':
      if ( ownerOfPlanet(planet)==0 ) destroyCannon( getCannonFromPlanet(planet) );
      break;
    case 'conflict':
      msgToUsr(
        'A green died with honor.',
        'A green died, but he took a reddish with him.'
      );
      break;
    case 'addToShip':
      if ( lastMsgToUsr < now()-secs(6) )
        msgToUsr( '',
          'A green enlistment to the crew.', '',
          'A new green enter in the ship.', '',
          'Today is a good day to die.', ''
        );
      break;
    case 'playerLanding':
      if ( lastMsgToUsr < now()-secs(6) )
        msgToUsr( '',
          "It's always a great day when a green lands a planet.", '',
          'A new green land the planet.', '',
          'We will rule this planet!', ''
        );
      break;
    case 'enemyLanding':
      owner = ownerOfPlanet(planet);
      if ( owner == 1 ) {
        if ( lastMsgToUsr < now()-secs(6) )
          msgToUsr( '',
            'Our radar detects a reddish has landed a planet.', '',
            'Reddish reinforcements was landed on a <b>non green</b> planet.', ''
          );
      } else {
        if ( lastMsgToUsr < now()-secs(2) )
          msgToUsr(
            'Our radar detects a reddish has landed a green planet!',
            'Reddish reinforcements was landed on a conflicting planet.',
            'WARNING! WARNING! Reddish landing on one of our planets!'
          );
      }
      break;
  }
  var totPlanets=0, totMine=0, totEnemy=0, totConflict=0, p;
  for ( var id in planets ) {
    p = planets[id];
    totPlanets++;
    owner = ownerOfPlanet(p);
    if (owner>0 || owner<1) totConflict++;
    else if (owner==0) totMine++;
    else if (owner==1) totEnemy++;
  }
  if ( totMine == totPlanets ) return playerWin.style.display = block;
  if ( totMine == 0 && totConflict == 0 ) return shipDie('You lose all your planets');
};

var ticCounter = 0, framesPerSec = 30;

setInterval(function() {
  //include objects-update
  //include draw
}, 1000/framesPerSec);

d.onclick = function (ev) {
  if (d.mozFullScreenEnabled) b.mozRequestFullScreen();
  if (d.webkitFullscreenEnabled) b.webkitRequestFullScreen();
};

var pressBt = function(bt, on) {
  shipLastJet = now();
  usrInput[bt] = on;
  window[bt].className = on ? 'pressed' : ''
};

var fireWeapon = function () {
  if ( ship.weapon ) {
    btW.className = 'empty';
    ship.weapon = false;
    newMissile(0, ship.x, ship.y,
      (ship.planet ? ship.planet.vx : ship.vx) + cos(ship.rotate) * 4,
      (ship.planet ? ship.planet.vy : ship.vy) + sin(ship.rotate) * 4
    );
    playAudio('gun');
    setTimeout(function(){
      btW.className = '';
      ship.weapon = true;
    }, secs(4));
  }
};

var pressDialogBt = function () {
};

d.onkeydown = function (ev) {
  switch (ev.keyCode) {
    case 38: pressBt('btU', true); break;
    case 37: pressBt('btL', true); break;
    case 39: pressBt('btR', true); break;
    case 32: fireWeapon(); break;
  }
};

d.onkeyup = function (ev) {
  switch (ev.keyCode) {
    case 38: pressBt('btU', false); break;
    case 37: pressBt('btL', false); break;
    case 39: pressBt('btR', false); break;
    case 13: pressDialogBt(); break;
  }
};

btL.addEventListener("touchstart", function(){ pressBt('btL', true) });
btR.addEventListener("touchstart", function(){ pressBt('btR', true) });
btU.addEventListener("touchstart", function(){ pressBt('btU', true) });
btW.addEventListener("touchstart", function(){ fireWeapon() });
btL.addEventListener("touchend", function(){ pressBt('btL', false) });
btR.addEventListener("touchend", function(){ pressBt('btR', false) });
btU.addEventListener("touchend", function(){ pressBt('btU', false) });

ctrlQ1.onclick = function(){ qualityLevel = 1 };
ctrlQ2.onclick = function(){ qualityLevel = 2 };
ctrlQ3.onclick = function(){ qualityLevel = 3 };
ctrlM.onclick  = function(){ this.checked ? music.play() : music.pause() };
ctrlS.onclick  = function(){ allowSound = this.checked };
ctrlQ1.click();
ctrlM.checked = true;
ctrlS.checked = true;

} catch (e) {
  alert(e)
  throw e;
}
