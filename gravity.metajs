"use strict";

try {

var RIFFWAVE;
// include riffwave

var log = function() { // debug
  var args = []; // debug
  for (var i=0; i<arguments.length; i++) args.push(arguments[i]); // debug
  /Android/.test(navigator.userAgent) ? // debug
    0: //alert(args.join(' - ')) : // debug
    console.log.apply(console,args); // debug
}; // debug

var abs = Math.abs,
    sin = Math.sin,
    cos = Math.cos,
    pi = Math.PI,
    completeRad = 2 * pi, // complete revolution
    deg90 = pi/2,
    turn3 = completeRad/3;

var biteLimit = function(val) {
  return val>255 ? 255 : ( val<0 ? 0 : val );
}

var rand = function(num) { return (Math.random()-0.5) * (num||1) };

var makeAudio = function(length, toneIni, toneEnd, noise, gainFn) {
  gainFn = {
    line: function(i,length){ return 1-i/length },
    triangle: function(i,length){
      return (i<length/3) ? i/(length/3) : 1-(i-(length/3))/(length*2/3)
    }
  }[gainFn||'line'];
  var toneDelta = toneEnd - toneIni;
  var data = [];
  for ( var i=0; i<length; i++ )
    data.push(biteLimit(
      sin( i*(toneIni+toneDelta*(i/length))/800 + noise*rand(pi) )
      * 127 // half value
      * gainFn(i,length) // increase/decrease amplitude
      + 127 // move to medium line
    ));
  var wav = new RIFFWAVE(data);
  var player = document.createElement('audio');
  player.src = wav.dataURI;
  return player;
}

var play = function(soundName) {
  if (allowSound) play[soundName].play();
};
play.explosion = makeAudio(10000, 150, 50, 1);
play.gun = makeAudio(4000, 1500, 600, 0.2, 'triangle');

// makeMusic -- build a RIFFWAVE music based on a score simplifyed notation
// param music is a string each 3 char means:
// * length: 2^value * 1000
//   * 7 semibreve    = 4 secs
//   * 6 mínima       = 2 secs
//   * 5 semínima     = 1 sec at sample rate 8000
//   * 4 colcheia     = 1/2 sec
//   * 3 semicolcheia = 1/4 sec
//   * 2 fusa         = 1/8 sec
//   * 1 semifusa     = 1/16 sec
// * note: a sequential upper letter to represent a frequency, where N is A4 (440Hz)
//   * G3# = A 
//   * A3  = B lá
//   * A3# = C 
//   * B3  = D sí
//   * C4  = E dó
//   * C4# = F 
//   * D4  = G ré
//   * D4# = H 
//   * E4  = I mí
//   * F4  = J fá
//   * F4# = K 
//   * G4  = L sol
//   * G4# = M 
//   * A4  = N lá
//   * A4# = O
//   * B4  = P sí
//   * C5  = Q dó
//   * C5# = R
//   * D5  = S ré
//   * D5# = T
//   * E5  = U mí
//   * F5  = V fá
//   * F5# = W
//   * G5  = X sol
//   * G5# = Y
//   * A5  = Z lá
// * separator: an ignored char
var makeMusic = function(sampleRate, bpm, pitch, music) {
  var pitchFn = function(i,length){
    return ( (i<length/4) ? i/(length/4) : 1-(i-(length/4))/(length*3/4) ) * pitch;
  }
  var data = [];
  for ( var n=0; n<music.length; n+=3 ) {
    var length = Math.pow(2, parseInt(music.charAt(n))) * (sampleRate/32) * 120/bpm;
    if ( music.charAt(n+1) == '-' ) {
      var freq = 0 // pause
    } else {
      var note = music.charCodeAt(n+1)-78; // the "N" value, so N is A4 (440Hz)
      var freq = Math.pow(2, note/12 ) * 440 // Hz
    }
    for ( var i=0; i<length; i++ ) {
      data.push(biteLimit(
        sin( i*pi*freq/sampleRate )
        * 127 // half value
        * pitchFn(i,length) // increase/decrease amplitude
        + 127 // move to medium line
      ));
    }
  }
  var wav = new RIFFWAVE(data,{sampleRate:sampleRate});
  var player = document.createElement('audio');
  player.src = wav.dataURI;
  return player;
}
var music;
setTimeout(function(){
  var superman = '4L 3L 3E 3L 5L 1- 4Q 4L 5E 1- 4L 3L 3E 3L 5L 1- 4Q 3P 5P ';
                 //'4L 3L 3E 3L 5L 1- 4Q 4L 5E 1- 3Q 3Q 3Q 3Q 3S 3S 4S 3Z 3X ';
  var heart;
  for (var t=6; t>3 ;t--) for (var i=0; i<3*t ;i++) heart += '3G 2D '+t+'- ';
  var intro   = '4D 4D 3G 3G 3- 4I 4J 3K 3L 3- 4D 4D 3G 3G 3- 4N 4M 3K 3J 3- ';
  var phrase1 = '4E 4F 4G 3E 3F 3G 2E 2F 2G 1- 2H 2I 2J 1- 2K 2L 2M 1- ';
  var phrase2 = '3W 3Z 3Y 3X 3W 2- 2N 2N 2N 2- 2M 2M 2M 2- 2L 2L 2L 2- 3P 3O ';
  var phrase3 = '2- ';
  for (var i='O'.charCodeAt(0); i>'B'.charCodeAt(0) ;i-=4)
    phrase3 += '4' + String.fromCharCode(i+1) +' '+
               '4' + String.fromCharCode(i+1) +' '+
               '3' + String.fromCharCode(i) +' '+
               '3' + String.fromCharCode(i) +' '+
               '3' + String.fromCharCode(i) +' '+
               '3' + String.fromCharCode(i) +' 3- ';
  music = makeMusic(2000, 180, .7,
    heart + intro + phrase1 + phrase2 + phrase3 + heart + superman
  );
  music.loop = true;
  music.play();
}, 100);

var randColor = function(mr,vr,mg,vg,mb,vb) {
  var r1 = Math.round( mr + rand(vr) ),
      g1 = Math.round( mg + rand(vg) ),
      b1 = Math.round( mb + rand(vb) ),
      r2 = Math.round( r1*2.8 ),
      g2 = Math.round( g1*2.8 ),
      b2 = Math.round( b1*2.8 ),
      r3 = Math.round( r1*3.6 ),
      g3 = Math.round( g1*3.6 ),
      b3 = Math.round( b1*3.6 );
      biteLimit(r2);
      biteLimit(g2);
      biteLimit(b2);
      biteLimit(r3);
      biteLimit(g3);
      biteLimit(b3);
  return [ [r1,g1,b1].join(','), [r2,g2,b2].join(','), [r3,g3,b3].join(',') ];
};

var distP2P = function(p1, p2) {
  var dx = p1.x - p2.x,
      dy = p1.y - p2.y,
      d = Math.sqrt( dx*dx + dy*dy ),
      x = dx / d,
      y = dy / d;
  return { x:x, y:y, d:d }
};

var ctx = c.getContext('2d'),
    ctxMap = map.getContext('2d'),
    d = document,
    b = d.body,
    touchable = false,
    qualityLevel = 1,
    allowSound = true,
    pause = false,
    secs = function(num) { return num*1000 },
    //macro orbDist1: 500
    //macro orbDist2: 900
    //macro orbDist3: 1400
    //macro orbDist4: 1900
    //macro orbVel1: .0020
    //macro orbVel2: .0010
    //macro orbVel3: .0005
    //macro orbVel4: .0002
    planets = {
      sun:{ m:200, c:['255,180,0','255,255,10','255,255,80'], r:150+rand(10) },

      // Orbit 1
      p1a:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:rand() },

      p1b:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:2+rand() },

      p1c:  { m:40, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist1+rand(20), v:orbVel1,  a:4+rand() },

      // Orbit 2
      p2a:  { m:30, c:['0,100,180','0,180,220','50,220,255'],
              r:40, d:orbDist2+rand(50), v:orbVel2, a:0.0+rand()*.8 },
      m2a1: { m:20, c:['100,100,100','200,200,200','250,250,250'],
              r:25,  d:130+rand(10),  v:orbVel1*4,  a:rand(7), p:'p2a' },

      p2b:  { m:30, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist2+rand(50), v:orbVel2, a:1.5+rand()*.8 },

      p2c:  { m:30, c:randColor(100,60,80,80,0,120),
              r:45+rand(10), d:orbDist2+rand(50), v:orbVel2, a:3.0+rand()*.8 },

      p2d:  { m:30, c:randColor(100,60,80,80,0,120),
              r:35+rand(10), d:orbDist2+rand(50), v:orbVel2, a:4.5+rand()*.8 },

      // Orbit 3
      p3a:  { m:50, c:randColor(100,60,80,80,0,120),
              r:70+rand(15), d:orbDist3+rand(20), v:orbVel3, a:2+rand() },

      p3b:  { m:50, c:randColor(100,60,80,80,0,120),
              r:80+rand(15), d:orbDist3+rand(20), v:orbVel3, a:4+rand() },
      m3b1: { m:20, c:randColor(100,60,80,80,0,120),
              r:20+rand(2),  d:160+rand(10),   v:orbVel3*6,  a:rand(7), p:'p3b' },
      m3b2: { m:20, c:randColor(100,60,80,80,0,120),
              r:18+rand(3),  d:230+rand(10),  v:orbVel3*3,  a:rand(), p:'p3b' },
      m3b3: { m:20, c:randColor(100,60,80,80,0,120),
              r:18+rand(3),  d:230+rand(10),  v:orbVel3*3,  a:3+rand(), p:'p3b' },

      p3c:  { m:50, c:randColor(100,60,80,80,0,120),
              r:70+rand(15), d:orbDist3+rand(20), v:orbVel3, a:0+rand() },

      // Orbit 4
      p4a:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:0.0+rand()*.8 },

      p4b:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:1.5+rand()*.8 },

      p4c:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:3.0+rand()*.8 },

      p4d:  { m:50, c:randColor(100,60,80,80,0,120),
              r:50+rand(20), d:orbDist4+rand(50), v:orbVel4, a:4.5+rand()*.8 }
    },
    biggerPlanetD = orbDist4,
    boids = [], // see "Initialize Boids"
    missiles = [],
    sun = planets.sun,
    // zoom: the wanted zoom.
    // z: the current zoom.
    // scrC*: the center of the screen, calculated on start and each resize.
    // viewC*: the related wanted position to put on the center of the screen.
    // vC*: the current related position to put on the center of the screen.
    vCX = null,
    vCY = null,
    viewCX = 0,
    viewCY = 0,
    scrCX = 0,
    scrCY = 0,
    w = 0,
    h = 0,
    z = 0.1,
    zoom = 1,
    ship = null, // see "Initialize Ship"
    shipAlive = false,
    usrInput = {},
    explosions = [],
    focus = ship,
    imgDataObj, imgData, imgDataLength,
    gConst = 0.01, //6.674e-11
    pixelRatio = window.devicePixelRatio,
    now = Date.now,
    start = now();

viewport.setAttribute('content',
  'width=device-width, user-scalable=no, initial-scale=' + (1/pixelRatio)
);
if ( pixelRatio >= 2 ) b.className += ' pix20';
else if ( pixelRatio > 1 ) b.className += ' pix15';

try {
  if (document.createEvent("TouchEvent")) {
    b.className += ' touchable';
    touchable = true;
  }
} catch(e) { }

var shipDie = function(txt, showNow) {
  play('explosion');
  shipAlive = false;
  if (!showNow) return setTimeout( function(){ shipDie(txt,true) }, 500 );
  focus = sun;
  zoom = (h/biggerPlanetD)/2;
  if (!txt) txt = 'You die.'
  deadMsg.innerHTML += txt +
    '<a class="bt" onclick="document.location.reload()">Restart</a>';
  pressDialogBt = function(){ document.location.reload() };
  deadMsg.style.display = 'block';
};

ctrl.onclick = function() {
  pause = true;
  pressDialogBt = function(){ ctrlClose.click(); };
  ctrlBox.style.display = 'block';
};

ctrlClose.onclick = function() {
  pause = false;
  ctrlBox.style.display = 'none';
};

(window.onresize = function(e) {
  if (vCX==null) {
    vCX = planets.p2a.d/2;
    vCY = planets.p2a.d/2;
  }
  scrCX = (c.width = w = d.documentElement.clientWidth) / 2;
  scrCY = (c.height = h = d.documentElement.clientHeight) / 2;
  map.cx = (map.width = mapBox.clientWidth - 10) / 2;
  map.cy = (map.height = mapBox.clientHeight - 10) / 2;
  ctxMap.fillStyle = '#333';
  ctxMap.fillRect (0,0,map.width,map.height);
  log(w,h, map.width,map.height);
  /*
  log( 'resize', scrCX,w, scrCY,h ); // debug
  imgDataObj = ctx.getImageData(0,0,w,h);
  imgData = imgDataObj.data;
  for (var x=-scrCX; x<scrCX; x++) {
    for (var y=-scrCY; y<scrCY; y++) {
      var i = w*(y+scrCY) + x+scrCX,
          j = y * x + start,
          v1 = (x*x/3+y*y-3e4) / 20,
          v2 = abs(j) % v1;
      if ( v2 < 15 ) {
        imgData[i*4+0] = 155 + ( v2%3<0.5 ? 80 : 0 )
        imgData[i*4+1] = 155 + ( v2%4<0.5 ? 90 : 0 )
        imgData[i*4+2] = 160 + ( v2%2<0.5 ? 90 : 0 )
        imgData[i*4+3] = v2<5 ? v2*70 : v2*17
        //imgData[i*4+3] = (1-(abs(j)%(x*x+y*y-1e4)/400)) * 255;
      }
    }
  }*/
})();

var boidsOnPlanet = function(p) {
  var list = [];
  boids.forEach(function(b){ if(b.planet==p) list.push(b) });
  return list;
};

var ownerOfPlanet = function(p) {
  var boids = boidsOnPlanet(p);
  if (boids.length==0) return -1;
  var owner = boids[0].o;
  boids.forEach(function(b){ owner = (owner+b.o)/2 });
  return owner;
};

Array.prototype.remove = function(item) {
  var newList = [];
  this.forEach(function(i){
    if(i!=item) newList.push(i);
  });
  return newList;
};

/*Array.prototype.rand = function() {
  var index = Math.round( Math.random() * this.length );
  if (index == this.length) index = 0;
  return this[index];
};*/

var landingPos = function(obj, p) {
  return {
    x: p.x + cos(obj.rotate)*(p.r+obj.r),
    y: p.y + sin(obj.rotate)*(p.r+obj.r)
  }
};

var updatePosition = function(obj, inPlanet, planetProximation) {
  var p = obj.planet;
  if (p) { // in a planet
    obj.vx = obj.vy = 0;
    obj.rotateV = (obj.rotateV||0) * 0.99;
    obj.rotate = (obj.rotate||0) + obj.rotateV;
    obj.x = p.x + cos(obj.rotate||0)*(p.r+obj.r);
    obj.y = p.y + sin(obj.rotate||0)*(p.r+obj.r);
    inPlanet(p);
  }
  else { // Object is fling
    for ( var id in planets ) {
      var p = planets[id];
      var dist = distP2P( p, obj );
      // Normal gravity lower to distance. Here never is so far.
      var f = dist.d<999 ? (gConst*p.m)/dist.d : (gConst*p.m)/999;
      obj.vx = (obj.vx||0) + f * dist.x;
      obj.vy = (obj.vy||0) + f * dist.y;
      var proximity = dist.d - p.r - obj.r;
      for ( var limitDist in planetProximation ) {
        // Near to the planet
        if (proximity <= parseInt(limitDist))
          planetProximation[limitDist](p, proximity);
      }
    }
  }
  obj.rotate  %= completeRad;
  if (obj.rotate<0) obj.rotate += completeRad;
  obj.x += obj.vx;
  obj.y += obj.vy;
};

var getAngleToPlanet = function(obj, planet) {
  var dist = distP2P(obj, planet);
  var acos = Math.acos(dist.x);
  var asin = Math.asin(dist.y);
  var angleToPlanet = (asin > 0 ? acos : completeRad - acos);
  return angleToPlanet % completeRad;
};

var addCrew = function(b) {
  ship.crew.push(b);
  boids = boids.remove(b);
  b.shipIO = now();
};

var shipLastExitCrew=0, shipLastJet=0;
var releaseCrew = function() {
  var b = ship.crew[0];
  // Has boid AND 1sec no user up AND 1sec last boid leave the ship
  if ( b && (now()-shipLastJet)>secs(1) &&
       shipLastJet>b.shipIO &&
       (now()-shipLastExitCrew)>secs(.5)
     ) {
    shipLastExitCrew = now();
    b.shipIO = now();
    b.planet = ship.planet;
    b.r = 2;
    b.rotate = ship.rotate + rand(.5);
    boids.push(b);
    ship.crew = ship.crew.remove(b);
  }
};

var newMissile = function(o, x,y, vx,vy) {
  var m = {o:o,  x:x, y:y, r:4,
    vx: vx + cos(ship.rotate) * 2,
    vy: vy + sin(ship.rotate) * 2
  };
  missiles.push(m);
  return m;
}

var newBoid = function(o, r, x,y, vx,vy, rotate, planet, pushToList) {
  var c1 = 40, c2 = -40;
  if (rand()<0) c1*=-1, c2*=-1;
  var b = {
    o: o, r: (r||1+rand()),
    x: (x||0), y: (y||0),
    vx: (vx||0), vy: (vy||0),
    planet:  planet,
    rotate:  (rotate||rand(completeRad)),
    rotateV: rand(.01),
    shipIO:  now()-secs(5),
    color: (o == 0) ?
      randColor(c1/2,40, 90,50, c2,50) :
      randColor(110,50, 40,50, 0,10)
  };
  if (pushToList!==false) boids.push(b);
  return b;
}

//TODO: var newExplosion

var lastMsgToUsr = now();
var msgToUsr = function() {
  lastMsgToUsr = now();
  var index = Math.round( Math.random() * arguments.length );
  if (index == arguments.length) index = 0;
  msgBox.innerHTML = arguments[index];
  msgBox.className = 'visible';
  setTimeout( function(){ msgBox.className='' }, secs(1) );
};

var ticCounter = 0, framesPerSec = 30;

setInterval(function() {
  //include objects-update
  //include draw
}, 1000/framesPerSec);

d.onclick = function (ev) {
  if (d.mozFullScreenEnabled) b.mozRequestFullScreen();
  if (d.webkitFullscreenEnabled) b.webkitRequestFullScreen();
};

var pressBt = function(bt, on) {
  shipLastJet = now();
  usrInput[bt] = on;
  window[bt].className = on ? 'pressed' : ''
};

var fireWeapon = function () {
  if ( ship.weapon ) {
    btW.className = 'empty';
    ship.weapon = false;
    newMissile(0, ship.x, ship.y,
      (ship.planet ? ship.planet.vx : ship.vx) + cos(ship.rotate) * 2,
      (ship.planet ? ship.planet.vy : ship.vy) + sin(ship.rotate) * 2
    );
    play('gun');
    setTimeout(function(){
      btW.className = '';
      ship.weapon = true;
    }, secs(4));
  }
};

var pressDialogBt = function () {
};

d.onkeydown = function (ev) {
  switch (ev.keyCode) {
    case 38: pressBt('btU', true); break;
    case 37: pressBt('btL', true); break;
    case 39: pressBt('btR', true); break;
    case 32: fireWeapon(); break;
  }
};

d.onkeyup = function (ev) {
  switch (ev.keyCode) {
    case 38: pressBt('btU', false); break;
    case 37: pressBt('btL', false); break;
    case 39: pressBt('btR', false); break;
    case 13: pressDialogBt(); break;
  }
};

btL.addEventListener("touchstart", function(){ pressBt('btL', true) });
btR.addEventListener("touchstart", function(){ pressBt('btR', true) });
btU.addEventListener("touchstart", function(){ pressBt('btU', true) });
btW.addEventListener("touchstart", function(){ fireWeapon() });
btL.addEventListener("touchend", function(){ pressBt('btL', false) });
btR.addEventListener("touchend", function(){ pressBt('btR', false) });
btU.addEventListener("touchend", function(){ pressBt('btU', false) });

ctrlQ1.onclick = function(){ qualityLevel = 1 };
ctrlQ2.onclick = function(){ qualityLevel = 2 };
ctrlQ3.onclick = function(){ qualityLevel = 3 };
ctrlM.onclick  = function(){ this.checked ? music.play() : music.pause() };
ctrlS.onclick  = function(){ allowSound = this.checked };
ctrlQ1.click();
ctrlM.checked = true;
ctrlS.checked = true;

} catch (e) {
  alert(e)
  throw e;
}
